// Crie uma interface Logger.
// Logger deve possuir um m√©todo log, que recebe um par√¢metro do tipo string e n√£o retorna nada (void).
interface Logger {
  log(param:string): void;
}

// Crie uma classe ConsoleLogger que implementa Logger. Voc√™ deve imaginar como o m√©todo log deve ser implementado, n√©? üòÅ.
class ConsoleLogger implements Logger {
  log(param:string):void {
    console.log(param);
  }
}

// Crie uma classe ConsoleLogger2 igual √† classe anterior, apenas a t√≠tulo de exemplo.
// No console.log dentro do m√©todo log, diferencie o ConsoleLogger2 do ConsoleLogger.
class ConsoleLogger2 implements Logger {
  log(param: string): void {
    console.log('Logger2:' + param);
  }
}

// Crie uma interface _Database_.
interface Database {
  // _Database_ deve possuir um atributo do tipo `Logger`.
  logger: Logger;
  // _Database_ deve possuir um m√©todo `save`, que recebe dois par√¢metros, `key` e `value`, ambos _strings_, e n√£o retorna nada (_void_).
  save(key: string, value: string): void;
}

// Crie uma classe ExampleDatabase que implementa Database.
// ExampleDatabase deve receber o Logger como par√¢metro do construtor, e possuir como valor padr√£o um ConsoleLogger.
class ExampleDatabase implements Database {
  constructor(public logger: Logger = new ConsoleLogger()){}

// Dentro do m√©todo save, chame a fun√ß√£o log do Logger passado para o database para fazer o log dos par√¢metros passados para a save.
  save(key: string, value: string): void {
   this.logger.log(`a chave √© ${key} e o valor √© ${value}`);
  }
}

// Crie um objeto de cada um dos Loggers.
// Crie tr√™s objetos da ExampleDatabase, cada um dos dois primeiros recebendo um dos Loggers, e o √∫ltimo n√£o recebendo nenhum.
const logger1= new ConsoleLogger();

// Utilize todos eles para salvar um conte√∫do fict√≠cio.
const database1 = new ExampleDatabase(logger1);
database1.save('chave 1', 'valor 1');